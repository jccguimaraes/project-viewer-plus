'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _devlog = require('./devlog');

var _devlog2 = _interopRequireDefault(_devlog);

var _database = require('./database');

var _database2 = _interopRequireDefault(_database);

var _packages = require('./packages');

var _packages2 = _interopRequireDefault(_packages);

var _base = require('./../constants/base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Class representing the Database
 */
let ContextSwitcher = class ContextSwitcher {

  /**
   * description
   *
   * @todo improve JSDoc
   */
  constructor() {
    if (ContextSwitcher.instance) {
      return ContextSwitcher.instance;
    }
    ContextSwitcher.instance = this;

    this.database = new _database2.default();
    this.packages = new _packages2.default();
  }

  /**
   * description
   *
   * @param {Object} states - description
   */
  savePackages(states) {
    states.treeView = this.packages.treeView.save();
    states.findAndReplace = this.packages.findAndReplace.save();
    this.packages.linterUIDefault.save();
    this.packages.linter.save();
  }

  /**
   * description
   *
   * @param {Object} states - description
   * @returns {Promise} description
   */
  loadOrReloadPackages(states) {
    if (!states) {
      return Promise.resolve();
    }
    return this.packages.treeView.load(states.treeView).then(() => this.packages.findAndReplace.load(states.findAndReplace)).then(() => this.packages.statusBar.reload()).then(() => this.packages.linter.load()).then(() => this.packages.linterUIDefault.load());
  }

  /**
   * description
   *
   * @param {Object} context - description
   * @returns {Promise} description
   */
  saveContext(context) {
    return new Promise(resolve => {
      context.current_project = this.database.content.selectedId ? this.database.content.map[this.database.content.selectedId] : { model: { paths: atom.project.getPaths() } };

      (0, _devlog2.default)('start save context', context.current_project);

      context.key = atom.getStateKey(context.current_project.model.paths);

      context.state = atom.serialize();

      context.docker = atom.workspace.getCenter();

      context.state.extraStates = {};

      if (context.key && context.state) {
        this.savePackages(context.state.extraStates);
        atom.getStorageFolder().storeSync(context.key, context.state);
      }

      (0, _devlog2.default)('end save context', context);

      resolve(context);
    });
  }

  /**
   * description
   *
   * @param {Object} context - description
   * @returns {Promise} description
   */
  loadContext(context) {
    return new Promise((resolve, reject) => {
      (0, _devlog2.default)('start load context', context.next_project);

      context.key = atom.getStateKey(context.next_project.model.paths);
      context.state = atom.getStorageFolder().load(context.key);

      if (!context.state || atom.getStateKey(context.state.project.paths) !== context.key) {
        atom.project.setPaths(context.next_project.model.paths);

        const pane = atom.workspace.getCenter().paneContainer.activePane;

        if (pane) {
          pane.destroy();
        }

        this.database.content.selectedId = context.next_project.id;

        context.current_project.selected = false;
        context.next_project.selected = true;

        return resolve(context);
      }

      atom.project.deserialize(context.state.project).then(() => atom.workspace.getCenter().deserialize(context.state.workspace.paneContainers.center, atom.deserializers)).then(() => this.loadOrReloadPackages(context.state.extraStates)).then(() => {
        this.database.content.selectedId = context.next_project.id;

        context.current_project.selected = false;
        context.next_project.selected = true;

        // TODO: this is bad for performance
        this.database.update();

        (0, _devlog2.default)('end load context');

        resolve(context);
      });
    });
  }

  /**
   * @param {Object} project - description
   * @returns {Promise} description
   */
  validateContext(project) {
    return new Promise((resolve, reject) => {
      if (!atom.getStorageFolder) {
        reject(_base.MESSAGES.ATOM.INVALID_ATOM_API);
      } else if (project.id === this.database.content.selectedId) {
        reject(_base.MESSAGES.CONTEXT.SAME_PROJECT_ID);
      } else if (project.type !== 'project') {
        return reject(_base.MESSAGES.CONTEXT.NOT_A_PROJECT);
      } else if (!this.database.content.ids.includes(project.id)) {
        return reject(_base.MESSAGES.CONTEXT.NO_VALID_PROJECT_ID);
      }

      resolve({
        current_project: null,
        next_project: project,
        key: null,
        state: null
      });
    });
  }

  /**
   * description
   *
   * @param {Object} project - description
   * @returns {Promise} description
   */
  switchContext(project) {
    return this.validateContext(project).then(context => this.saveContext(context)).then(context => this.loadContext(context)).catch(reason => (0, _devlog2.default)('switching error', reason));
  }
};
exports.default = ContextSwitcher;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,