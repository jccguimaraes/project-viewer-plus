Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class, _temp;

var _base = require('./../../constants/base');

/**
 * Class representing the Database
 */
let Package = (_temp = _class = class Package {

  /**
   * description
   *
   * @returns {Object} description
   */
  getPackage() {
    return atom.config.get(Package.config) ? undefined : atom.packages.getLoadedPackage(Package.packageName);
  }

  /**
   * description
   *
   * @returns {Object} description
   */
  save() {
    console.log(`save ${Package.packageName}`);
    const pkg = this.getPackage();

    if (!pkg) {
      return {};
    }

    return pkg.serialize();
  }

  /**
   * description
   *
   * @param {Object} state - description
   * @returns {Promise} description
   */
  load(state) {
    console.log(`load ${Package.packageName}`);
    const pkg = this.getPackage();

    if (!pkg || !pkg.mainActivated || !state) {
      return Promise.resolve();
    }

    pkg.mainModule.findHistory.items = state.findHistory;
    pkg.mainModule.findHistory.length = state.findHistory.length;

    pkg.mainModule.findOptions.caseSensitive = state.findOptions.caseSensitive;
    pkg.mainModule.findOptions.findPattern = state.findOptions.findPattern;
    pkg.mainModule.findOptions.inCurrentSelection = state.findOptions.inCurrentSelection;
    pkg.mainModule.findOptions.leadingContextLineCount = state.findOptions.leadingContextLineCount;
    pkg.mainModule.findOptions.pathsPattern = state.findOptions.pathsPattern;
    pkg.mainModule.findOptions.replacePattern = state.findOptions.replacePattern;
    pkg.mainModule.findOptions.trailingContextLineCount = state.findOptions.trailingContextLineCount;
    pkg.mainModule.findOptions.useRegex = state.findOptions.useRegex;
    pkg.mainModule.findOptions.wholeWord = state.findOptions.wholeWord;

    pkg.mainModule.pathsHistory.items = state.pathsHistory;
    pkg.mainModule.pathsHistory.length = state.pathsHistory.length;

    pkg.mainModule.replaceHistory.items = state.replaceHistory;
    pkg.mainModule.replaceHistory.length = state.replaceHistory.length;

    return Promise.resolve();
  }
}, _class.packageName = 'find-and-replace', _class.config = `${_base.PLUGIN_NAME}.packages.findAndReplace`, _temp);
exports.default = Package;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zZXJ2aWNlcy9wYWNrYWdlcy9maW5kLWFuZC1yZXBsYWNlLmpzIl0sIm5hbWVzIjpbIlBhY2thZ2UiLCJnZXRQYWNrYWdlIiwiYXRvbSIsImNvbmZpZyIsImdldCIsInVuZGVmaW5lZCIsInBhY2thZ2VzIiwiZ2V0TG9hZGVkUGFja2FnZSIsInBhY2thZ2VOYW1lIiwic2F2ZSIsImNvbnNvbGUiLCJsb2ciLCJwa2ciLCJzZXJpYWxpemUiLCJsb2FkIiwic3RhdGUiLCJtYWluQWN0aXZhdGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJtYWluTW9kdWxlIiwiZmluZEhpc3RvcnkiLCJpdGVtcyIsImxlbmd0aCIsImZpbmRPcHRpb25zIiwiY2FzZVNlbnNpdGl2ZSIsImZpbmRQYXR0ZXJuIiwiaW5DdXJyZW50U2VsZWN0aW9uIiwibGVhZGluZ0NvbnRleHRMaW5lQ291bnQiLCJwYXRoc1BhdHRlcm4iLCJyZXBsYWNlUGF0dGVybiIsInRyYWlsaW5nQ29udGV4dExpbmVDb3VudCIsInVzZVJlZ2V4Iiwid2hvbGVXb3JkIiwicGF0aHNIaXN0b3J5IiwicmVwbGFjZUhpc3RvcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBOzs7SUFHTUEsTyxxQkFBTixNQUFNQSxPQUFOLENBQWM7O0FBS1o7Ozs7O0FBS0FDLGVBQWM7QUFDWixXQUFPQyxLQUFLQyxNQUFMLENBQVlDLEdBQVosQ0FBZ0JKLFFBQVFHLE1BQXhCLElBQWtDRSxTQUFsQyxHQUNMSCxLQUFLSSxRQUFMLENBQWNDLGdCQUFkLENBQStCUCxRQUFRUSxXQUF2QyxDQURGO0FBRUQ7O0FBRUQ7Ozs7O0FBS0FDLFNBQVE7QUFDTkMsWUFBUUMsR0FBUixDQUFhLFFBQU9YLFFBQVFRLFdBQVksRUFBeEM7QUFDQSxVQUFNSSxNQUFNLEtBQUtYLFVBQUwsRUFBWjs7QUFFQSxRQUFJLENBQUNXLEdBQUwsRUFBVTtBQUNSLGFBQU8sRUFBUDtBQUNEOztBQUVELFdBQU9BLElBQUlDLFNBQUosRUFBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQUMsT0FBTUMsS0FBTixFQUFhO0FBQ1hMLFlBQVFDLEdBQVIsQ0FBYSxRQUFPWCxRQUFRUSxXQUFZLEVBQXhDO0FBQ0EsVUFBTUksTUFBTSxLQUFLWCxVQUFMLEVBQVo7O0FBRUEsUUFBSSxDQUFDVyxHQUFELElBQVEsQ0FBQ0EsSUFBSUksYUFBYixJQUE4QixDQUFDRCxLQUFuQyxFQUEwQztBQUN4QyxhQUFPRSxRQUFRQyxPQUFSLEVBQVA7QUFDRDs7QUFFRE4sUUFBSU8sVUFBSixDQUFlQyxXQUFmLENBQTJCQyxLQUEzQixHQUFtQ04sTUFBTUssV0FBekM7QUFDQVIsUUFBSU8sVUFBSixDQUFlQyxXQUFmLENBQTJCRSxNQUEzQixHQUFvQ1AsTUFBTUssV0FBTixDQUFrQkUsTUFBdEQ7O0FBRUFWLFFBQUlPLFVBQUosQ0FBZUksV0FBZixDQUNHQyxhQURILEdBQ21CVCxNQUFNUSxXQUFOLENBQWtCQyxhQURyQztBQUVBWixRQUFJTyxVQUFKLENBQWVJLFdBQWYsQ0FDR0UsV0FESCxHQUNpQlYsTUFBTVEsV0FBTixDQUFrQkUsV0FEbkM7QUFFQWIsUUFBSU8sVUFBSixDQUFlSSxXQUFmLENBQ0dHLGtCQURILEdBQ3dCWCxNQUFNUSxXQUFOLENBQWtCRyxrQkFEMUM7QUFFQWQsUUFBSU8sVUFBSixDQUFlSSxXQUFmLENBQ0dJLHVCQURILEdBQzZCWixNQUFNUSxXQUFOLENBQWtCSSx1QkFEL0M7QUFFQWYsUUFBSU8sVUFBSixDQUFlSSxXQUFmLENBQ0dLLFlBREgsR0FDa0JiLE1BQU1RLFdBQU4sQ0FBa0JLLFlBRHBDO0FBRUFoQixRQUFJTyxVQUFKLENBQWVJLFdBQWYsQ0FDR00sY0FESCxHQUNvQmQsTUFBTVEsV0FBTixDQUFrQk0sY0FEdEM7QUFFQWpCLFFBQUlPLFVBQUosQ0FBZUksV0FBZixDQUNHTyx3QkFESCxHQUM4QmYsTUFBTVEsV0FBTixDQUFrQk8sd0JBRGhEO0FBRUFsQixRQUFJTyxVQUFKLENBQWVJLFdBQWYsQ0FDR1EsUUFESCxHQUNjaEIsTUFBTVEsV0FBTixDQUFrQlEsUUFEaEM7QUFFQW5CLFFBQUlPLFVBQUosQ0FBZUksV0FBZixDQUNHUyxTQURILEdBQ2VqQixNQUFNUSxXQUFOLENBQWtCUyxTQURqQzs7QUFHQXBCLFFBQUlPLFVBQUosQ0FBZWMsWUFBZixDQUE0QlosS0FBNUIsR0FBb0NOLE1BQU1rQixZQUExQztBQUNBckIsUUFBSU8sVUFBSixDQUFlYyxZQUFmLENBQTRCWCxNQUE1QixHQUFxQ1AsTUFBTWtCLFlBQU4sQ0FBbUJYLE1BQXhEOztBQUVBVixRQUFJTyxVQUFKLENBQWVlLGNBQWYsQ0FBOEJiLEtBQTlCLEdBQXNDTixNQUFNbUIsY0FBNUM7QUFDQXRCLFFBQUlPLFVBQUosQ0FBZWUsY0FBZixDQUE4QlosTUFBOUIsR0FBdUNQLE1BQU1tQixjQUFOLENBQXFCWixNQUE1RDs7QUFFQSxXQUFPTCxRQUFRQyxPQUFSLEVBQVA7QUFDRDtBQTFFVyxDLFNBRUxWLFcsR0FBYyxrQixTQUNkTCxNLEdBQVUsR0FBRCxpQkFBZSwwQjtrQkEwRWxCSCxPIiwiZmlsZSI6ImZpbmQtYW5kLXJlcGxhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQTFVHSU5fTkFNRSB9IGZyb20gJy4vLi4vLi4vY29uc3RhbnRzL2Jhc2UnO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyB0aGUgRGF0YWJhc2VcbiAqL1xuY2xhc3MgUGFja2FnZSB7XG5cbiAgc3RhdGljIHBhY2thZ2VOYW1lID0gJ2ZpbmQtYW5kLXJlcGxhY2UnO1xuICBzdGF0aWMgY29uZmlnID0gYCR7UExVR0lOX05BTUV9LnBhY2thZ2VzLmZpbmRBbmRSZXBsYWNlYDtcblxuICAvKipcbiAgICogZGVzY3JpcHRpb25cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gZGVzY3JpcHRpb25cbiAgICovXG4gIGdldFBhY2thZ2UgKCkge1xuICAgIHJldHVybiBhdG9tLmNvbmZpZy5nZXQoUGFja2FnZS5jb25maWcpID8gdW5kZWZpbmVkIDpcbiAgICAgIGF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZShQYWNrYWdlLnBhY2thZ2VOYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkZXNjcmlwdGlvblxuICAgKi9cbiAgc2F2ZSAoKSB7XG4gICAgY29uc29sZS5sb2coYHNhdmUgJHtQYWNrYWdlLnBhY2thZ2VOYW1lfWApO1xuICAgIGNvbnN0IHBrZyA9IHRoaXMuZ2V0UGFja2FnZSgpO1xuXG4gICAgaWYgKCFwa2cpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGtnLnNlcmlhbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSAtIGRlc2NyaXB0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBkZXNjcmlwdGlvblxuICAgKi9cbiAgbG9hZCAoc3RhdGUpIHtcbiAgICBjb25zb2xlLmxvZyhgbG9hZCAke1BhY2thZ2UucGFja2FnZU5hbWV9YCk7XG4gICAgY29uc3QgcGtnID0gdGhpcy5nZXRQYWNrYWdlKCk7XG5cbiAgICBpZiAoIXBrZyB8fCAhcGtnLm1haW5BY3RpdmF0ZWQgfHwgIXN0YXRlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcGtnLm1haW5Nb2R1bGUuZmluZEhpc3RvcnkuaXRlbXMgPSBzdGF0ZS5maW5kSGlzdG9yeTtcbiAgICBwa2cubWFpbk1vZHVsZS5maW5kSGlzdG9yeS5sZW5ndGggPSBzdGF0ZS5maW5kSGlzdG9yeS5sZW5ndGg7XG5cbiAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgLmNhc2VTZW5zaXRpdmUgPSBzdGF0ZS5maW5kT3B0aW9ucy5jYXNlU2Vuc2l0aXZlO1xuICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAuZmluZFBhdHRlcm4gPSBzdGF0ZS5maW5kT3B0aW9ucy5maW5kUGF0dGVybjtcbiAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgLmluQ3VycmVudFNlbGVjdGlvbiA9IHN0YXRlLmZpbmRPcHRpb25zLmluQ3VycmVudFNlbGVjdGlvbjtcbiAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgLmxlYWRpbmdDb250ZXh0TGluZUNvdW50ID0gc3RhdGUuZmluZE9wdGlvbnMubGVhZGluZ0NvbnRleHRMaW5lQ291bnQ7XG4gICAgcGtnLm1haW5Nb2R1bGUuZmluZE9wdGlvbnNcbiAgICAgIC5wYXRoc1BhdHRlcm4gPSBzdGF0ZS5maW5kT3B0aW9ucy5wYXRoc1BhdHRlcm47XG4gICAgcGtnLm1haW5Nb2R1bGUuZmluZE9wdGlvbnNcbiAgICAgIC5yZXBsYWNlUGF0dGVybiA9IHN0YXRlLmZpbmRPcHRpb25zLnJlcGxhY2VQYXR0ZXJuO1xuICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAudHJhaWxpbmdDb250ZXh0TGluZUNvdW50ID0gc3RhdGUuZmluZE9wdGlvbnMudHJhaWxpbmdDb250ZXh0TGluZUNvdW50O1xuICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAudXNlUmVnZXggPSBzdGF0ZS5maW5kT3B0aW9ucy51c2VSZWdleDtcbiAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgLndob2xlV29yZCA9IHN0YXRlLmZpbmRPcHRpb25zLndob2xlV29yZDtcblxuICAgIHBrZy5tYWluTW9kdWxlLnBhdGhzSGlzdG9yeS5pdGVtcyA9IHN0YXRlLnBhdGhzSGlzdG9yeTtcbiAgICBwa2cubWFpbk1vZHVsZS5wYXRoc0hpc3RvcnkubGVuZ3RoID0gc3RhdGUucGF0aHNIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHBrZy5tYWluTW9kdWxlLnJlcGxhY2VIaXN0b3J5Lml0ZW1zID0gc3RhdGUucmVwbGFjZUhpc3Rvcnk7XG4gICAgcGtnLm1haW5Nb2R1bGUucmVwbGFjZUhpc3RvcnkubGVuZ3RoID0gc3RhdGUucmVwbGFjZUhpc3RvcnkubGVuZ3RoO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhY2thZ2U7XG4iXX0=