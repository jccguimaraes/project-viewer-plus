Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class, _temp;

var _devlog = require('./../devlog');

var _devlog2 = _interopRequireDefault(_devlog);

var _base = require('./../../constants/base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Class representing the Database
 */
let Package = (_temp = _class = class Package {

  /**
   * description
   *
   * @returns {Object} description
   */
  getPackage() {
    return atom.config.get(Package.config) ? undefined : atom.packages.getLoadedPackage(Package.packageName);
  }

  /**
   * description
   *
   * @returns {Object} description
   */
  save() {
    (0, _devlog2.default)(`save ${Package.packageName}`);
    const pkg = this.getPackage();

    if (!pkg) {
      return {};
    }

    return pkg.serialize();
  }

  /**
   * description
   *
   * @param {Object} state - description
   * @returns {Promise} description
   */
  load(state) {
    return new Promise(resolve => {

      (0, _devlog2.default)(`load ${Package.packageName}`);
      const pkg = this.getPackage();

      if (!pkg || !pkg.mainActivated || !state) {
        return resolve();
      }

      pkg.mainModule.findHistory.items = state.findHistory;
      pkg.mainModule.findHistory.length = state.findHistory.length;

      pkg.mainModule.findOptions.caseSensitive = state.findOptions.caseSensitive;
      pkg.mainModule.findOptions.findPattern = state.findOptions.findPattern;
      pkg.mainModule.findOptions.inCurrentSelection = state.findOptions.inCurrentSelection;
      pkg.mainModule.findOptions.leadingContextLineCount = state.findOptions.leadingContextLineCount;
      pkg.mainModule.findOptions.pathsPattern = state.findOptions.pathsPattern;
      pkg.mainModule.findOptions.replacePattern = state.findOptions.replacePattern;
      pkg.mainModule.findOptions.trailingContextLineCount = state.findOptions.trailingContextLineCount;
      pkg.mainModule.findOptions.useRegex = state.findOptions.useRegex;
      pkg.mainModule.findOptions.wholeWord = state.findOptions.wholeWord;

      pkg.mainModule.pathsHistory.items = state.pathsHistory;
      pkg.mainModule.pathsHistory.length = state.pathsHistory.length;

      pkg.mainModule.replaceHistory.items = state.replaceHistory;
      pkg.mainModule.replaceHistory.length = state.replaceHistory.length;

      resolve();
    });
  }
}, _class.packageName = 'find-and-replace', _class.config = `${_base.PLUGIN_NAME}.packages.findAndReplace`, _temp);
exports.default = Package;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zZXJ2aWNlcy9wYWNrYWdlcy9maW5kLWFuZC1yZXBsYWNlLmpzIl0sIm5hbWVzIjpbIlBhY2thZ2UiLCJnZXRQYWNrYWdlIiwiYXRvbSIsImNvbmZpZyIsImdldCIsInVuZGVmaW5lZCIsInBhY2thZ2VzIiwiZ2V0TG9hZGVkUGFja2FnZSIsInBhY2thZ2VOYW1lIiwic2F2ZSIsInBrZyIsInNlcmlhbGl6ZSIsImxvYWQiLCJzdGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibWFpbkFjdGl2YXRlZCIsIm1haW5Nb2R1bGUiLCJmaW5kSGlzdG9yeSIsIml0ZW1zIiwibGVuZ3RoIiwiZmluZE9wdGlvbnMiLCJjYXNlU2Vuc2l0aXZlIiwiZmluZFBhdHRlcm4iLCJpbkN1cnJlbnRTZWxlY3Rpb24iLCJsZWFkaW5nQ29udGV4dExpbmVDb3VudCIsInBhdGhzUGF0dGVybiIsInJlcGxhY2VQYXR0ZXJuIiwidHJhaWxpbmdDb250ZXh0TGluZUNvdW50IiwidXNlUmVnZXgiLCJ3aG9sZVdvcmQiLCJwYXRoc0hpc3RvcnkiLCJyZXBsYWNlSGlzdG9yeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7SUFHTUEsTyxxQkFBTixNQUFNQSxPQUFOLENBQWM7O0FBS1o7Ozs7O0FBS0FDLGVBQWM7QUFDWixXQUFPQyxLQUFLQyxNQUFMLENBQVlDLEdBQVosQ0FBZ0JKLFFBQVFHLE1BQXhCLElBQWtDRSxTQUFsQyxHQUNMSCxLQUFLSSxRQUFMLENBQWNDLGdCQUFkLENBQStCUCxRQUFRUSxXQUF2QyxDQURGO0FBRUQ7O0FBRUQ7Ozs7O0FBS0FDLFNBQVE7QUFDTiwwQkFBUSxRQUFPVCxRQUFRUSxXQUFZLEVBQW5DO0FBQ0EsVUFBTUUsTUFBTSxLQUFLVCxVQUFMLEVBQVo7O0FBRUEsUUFBSSxDQUFDUyxHQUFMLEVBQVU7QUFDUixhQUFPLEVBQVA7QUFDRDs7QUFFRCxXQUFPQSxJQUFJQyxTQUFKLEVBQVA7QUFDRDs7QUFFRDs7Ozs7O0FBTUFDLE9BQU1DLEtBQU4sRUFBYTtBQUNYLFdBQU8sSUFBSUMsT0FBSixDQUFZQyxXQUFXOztBQUU1Qiw0QkFBUSxRQUFPZixRQUFRUSxXQUFZLEVBQW5DO0FBQ0EsWUFBTUUsTUFBTSxLQUFLVCxVQUFMLEVBQVo7O0FBRUEsVUFBSSxDQUFDUyxHQUFELElBQVEsQ0FBQ0EsSUFBSU0sYUFBYixJQUE4QixDQUFDSCxLQUFuQyxFQUEwQztBQUN4QyxlQUFPRSxTQUFQO0FBQ0Q7O0FBRURMLFVBQUlPLFVBQUosQ0FBZUMsV0FBZixDQUEyQkMsS0FBM0IsR0FBbUNOLE1BQU1LLFdBQXpDO0FBQ0FSLFVBQUlPLFVBQUosQ0FBZUMsV0FBZixDQUEyQkUsTUFBM0IsR0FBb0NQLE1BQU1LLFdBQU4sQ0FBa0JFLE1BQXREOztBQUVBVixVQUFJTyxVQUFKLENBQWVJLFdBQWYsQ0FDR0MsYUFESCxHQUNtQlQsTUFBTVEsV0FBTixDQUFrQkMsYUFEckM7QUFFQVosVUFBSU8sVUFBSixDQUFlSSxXQUFmLENBQ0dFLFdBREgsR0FDaUJWLE1BQU1RLFdBQU4sQ0FBa0JFLFdBRG5DO0FBRUFiLFVBQUlPLFVBQUosQ0FBZUksV0FBZixDQUNHRyxrQkFESCxHQUN3QlgsTUFBTVEsV0FBTixDQUFrQkcsa0JBRDFDO0FBRUFkLFVBQUlPLFVBQUosQ0FBZUksV0FBZixDQUNHSSx1QkFESCxHQUM2QlosTUFBTVEsV0FBTixDQUFrQkksdUJBRC9DO0FBRUFmLFVBQUlPLFVBQUosQ0FBZUksV0FBZixDQUNHSyxZQURILEdBQ2tCYixNQUFNUSxXQUFOLENBQWtCSyxZQURwQztBQUVBaEIsVUFBSU8sVUFBSixDQUFlSSxXQUFmLENBQ0dNLGNBREgsR0FDb0JkLE1BQU1RLFdBQU4sQ0FBa0JNLGNBRHRDO0FBRUFqQixVQUFJTyxVQUFKLENBQWVJLFdBQWYsQ0FDR08sd0JBREgsR0FDOEJmLE1BQU1RLFdBQU4sQ0FBa0JPLHdCQURoRDtBQUVBbEIsVUFBSU8sVUFBSixDQUFlSSxXQUFmLENBQ0dRLFFBREgsR0FDY2hCLE1BQU1RLFdBQU4sQ0FBa0JRLFFBRGhDO0FBRUFuQixVQUFJTyxVQUFKLENBQWVJLFdBQWYsQ0FDR1MsU0FESCxHQUNlakIsTUFBTVEsV0FBTixDQUFrQlMsU0FEakM7O0FBR0FwQixVQUFJTyxVQUFKLENBQWVjLFlBQWYsQ0FBNEJaLEtBQTVCLEdBQW9DTixNQUFNa0IsWUFBMUM7QUFDQXJCLFVBQUlPLFVBQUosQ0FBZWMsWUFBZixDQUE0QlgsTUFBNUIsR0FBcUNQLE1BQU1rQixZQUFOLENBQW1CWCxNQUF4RDs7QUFFQVYsVUFBSU8sVUFBSixDQUFlZSxjQUFmLENBQThCYixLQUE5QixHQUFzQ04sTUFBTW1CLGNBQTVDO0FBQ0F0QixVQUFJTyxVQUFKLENBQWVlLGNBQWYsQ0FBOEJaLE1BQTlCLEdBQXVDUCxNQUFNbUIsY0FBTixDQUFxQlosTUFBNUQ7O0FBRUFMO0FBQ0QsS0F0Q00sQ0FBUDtBQXVDRDtBQTdFVyxDLFNBRUxQLFcsR0FBYyxrQixTQUNkTCxNLEdBQVUsR0FBRCxpQkFBZSwwQjtrQkE2RWxCSCxPIiwiZmlsZSI6ImZpbmQtYW5kLXJlcGxhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGV2bG9nIGZyb20gJy4vLi4vZGV2bG9nJztcbmltcG9ydCB7IFBMVUdJTl9OQU1FIH0gZnJvbSAnLi8uLi8uLi9jb25zdGFudHMvYmFzZSc7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBEYXRhYmFzZVxuICovXG5jbGFzcyBQYWNrYWdlIHtcblxuICBzdGF0aWMgcGFja2FnZU5hbWUgPSAnZmluZC1hbmQtcmVwbGFjZSc7XG4gIHN0YXRpYyBjb25maWcgPSBgJHtQTFVHSU5fTkFNRX0ucGFja2FnZXMuZmluZEFuZFJlcGxhY2VgO1xuXG4gIC8qKlxuICAgKiBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkZXNjcmlwdGlvblxuICAgKi9cbiAgZ2V0UGFja2FnZSAoKSB7XG4gICAgcmV0dXJuIGF0b20uY29uZmlnLmdldChQYWNrYWdlLmNvbmZpZykgPyB1bmRlZmluZWQgOlxuICAgICAgYXRvbS5wYWNrYWdlcy5nZXRMb2FkZWRQYWNrYWdlKFBhY2thZ2UucGFja2FnZU5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGRlc2NyaXB0aW9uXG4gICAqL1xuICBzYXZlICgpIHtcbiAgICBkZXZsb2coYHNhdmUgJHtQYWNrYWdlLnBhY2thZ2VOYW1lfWApO1xuICAgIGNvbnN0IHBrZyA9IHRoaXMuZ2V0UGFja2FnZSgpO1xuXG4gICAgaWYgKCFwa2cpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGtnLnNlcmlhbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSAtIGRlc2NyaXB0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBkZXNjcmlwdGlvblxuICAgKi9cbiAgbG9hZCAoc3RhdGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cbiAgICAgIGRldmxvZyhgbG9hZCAke1BhY2thZ2UucGFja2FnZU5hbWV9YCk7XG4gICAgICBjb25zdCBwa2cgPSB0aGlzLmdldFBhY2thZ2UoKTtcblxuICAgICAgaWYgKCFwa2cgfHwgIXBrZy5tYWluQWN0aXZhdGVkIHx8ICFzdGF0ZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICBwa2cubWFpbk1vZHVsZS5maW5kSGlzdG9yeS5pdGVtcyA9IHN0YXRlLmZpbmRIaXN0b3J5O1xuICAgICAgcGtnLm1haW5Nb2R1bGUuZmluZEhpc3RvcnkubGVuZ3RoID0gc3RhdGUuZmluZEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgICAuY2FzZVNlbnNpdGl2ZSA9IHN0YXRlLmZpbmRPcHRpb25zLmNhc2VTZW5zaXRpdmU7XG4gICAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgICAuZmluZFBhdHRlcm4gPSBzdGF0ZS5maW5kT3B0aW9ucy5maW5kUGF0dGVybjtcbiAgICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAgIC5pbkN1cnJlbnRTZWxlY3Rpb24gPSBzdGF0ZS5maW5kT3B0aW9ucy5pbkN1cnJlbnRTZWxlY3Rpb247XG4gICAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgICAubGVhZGluZ0NvbnRleHRMaW5lQ291bnQgPSBzdGF0ZS5maW5kT3B0aW9ucy5sZWFkaW5nQ29udGV4dExpbmVDb3VudDtcbiAgICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAgIC5wYXRoc1BhdHRlcm4gPSBzdGF0ZS5maW5kT3B0aW9ucy5wYXRoc1BhdHRlcm47XG4gICAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgICAucmVwbGFjZVBhdHRlcm4gPSBzdGF0ZS5maW5kT3B0aW9ucy5yZXBsYWNlUGF0dGVybjtcbiAgICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAgIC50cmFpbGluZ0NvbnRleHRMaW5lQ291bnQgPSBzdGF0ZS5maW5kT3B0aW9ucy50cmFpbGluZ0NvbnRleHRMaW5lQ291bnQ7XG4gICAgICBwa2cubWFpbk1vZHVsZS5maW5kT3B0aW9uc1xuICAgICAgICAudXNlUmVnZXggPSBzdGF0ZS5maW5kT3B0aW9ucy51c2VSZWdleDtcbiAgICAgIHBrZy5tYWluTW9kdWxlLmZpbmRPcHRpb25zXG4gICAgICAgIC53aG9sZVdvcmQgPSBzdGF0ZS5maW5kT3B0aW9ucy53aG9sZVdvcmQ7XG5cbiAgICAgIHBrZy5tYWluTW9kdWxlLnBhdGhzSGlzdG9yeS5pdGVtcyA9IHN0YXRlLnBhdGhzSGlzdG9yeTtcbiAgICAgIHBrZy5tYWluTW9kdWxlLnBhdGhzSGlzdG9yeS5sZW5ndGggPSBzdGF0ZS5wYXRoc0hpc3RvcnkubGVuZ3RoO1xuXG4gICAgICBwa2cubWFpbk1vZHVsZS5yZXBsYWNlSGlzdG9yeS5pdGVtcyA9IHN0YXRlLnJlcGxhY2VIaXN0b3J5O1xuICAgICAgcGtnLm1haW5Nb2R1bGUucmVwbGFjZUhpc3RvcnkubGVuZ3RoID0gc3RhdGUucmVwbGFjZUhpc3RvcnkubGVuZ3RoO1xuXG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFja2FnZTtcbiJdfQ==